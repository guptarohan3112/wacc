/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm' version '1.4.20'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    id 'antlr'
}

apply plugin: 'kotlin'

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

//    // dependency for kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // Use the Kotlin JUnit integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    // Dependency for the mockk testing setup
    testImplementation "io.mockk:mockk:1.10.5"

    antlr "org.antlr:antlr4:4.9.1"

    testCompile("org.junit.jupiter:junit-jupiter-params:5.7.0")

}

sourceSets {
    main {
        kotlin {
            srcDirs += 'src/main/kotlin/'
        }

        java {
            srcDirs += 'src/main/java/'
        }
    }

    test {
        kotlin {
            srcDirs += 'src/test/'
        }
    }
}

// only while we are still using STD input, to be removed
run {
    standardInput = System.in
}

jar {
    manifest {
        attributes 'Main-Class': 'wacc_05/WaccCompilerKt'
    }

    dependsOn(configurations.runtimeClasspath)
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

application {
    // Define the main class for the application.
    mainClass = 'wacc_05/WaccCompilerKt'
}

test {
    useJUnit {}
    testLogging {
        showStandardStreams = true
    }

    beforeTest { descriptor -> "Running test: " + descriptor }

    // set to true to fail on first test failure
    failFast = false
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task semanticTests(type: Test) {
    sourceSets {
        main {
            kotlin {
                srcDirs += 'src/main/kotlin/'
            }
            java {
                srcDirs += 'src/main/java/'
            }
        }
        test {
            kotlin {
                srcDirs += 'src/test/kotlin/wacc_05/front_end/semantic_tests/'
            }
        }
    }

    exclude 'wacc_05/back_end/execution_tests/'
    exclude 'wacc_05/front_end/error_tests'
}

task errorTests(type: Test) {
    sourceSets {
        main {
            kotlin {
                srcDirs += 'src/main/kotlin/'
            }
            java {
                srcDirs += 'src/main/java/'
            }
        }
        test {
            kotlin {
                srcDirs += 'src/test/kotlin/wacc_05/front_end/error_tests/'
            }
        }
    }

    exclude 'wacc_05/back_end/execution_tests/'
    exclude 'wacc_05/front_end/semantic_tests/'
}

task executionTests(type: Test) {
    sourceSets {
        main {
            kotlin {
                srcDirs += 'src/main/kotlin/'
            }
            java {
                srcDirs += 'src/main/java/'
            }
        }
        test {
            kotlin {
                srcDirs += 'src/test/kotlin/wacc_05/back_end/execution_tests/'
            }
        }
    }

    exclude 'wacc_05/front_end/'
}

/* THE BELOW CODE WAS TAKEN FROM
 https://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time"
 All Credit for this goes Shubham Chaudhary */

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}